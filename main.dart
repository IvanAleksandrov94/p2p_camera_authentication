import 'dart:io';
import 'dart:async';

var portnumber;

const List<int> pppp_discover_datagram = [0xF1, 0x30, 0x00, 0x00];

const List<int> pppp_discover_datagram1 = 
[0xf1, 0x41, 0x00, 0x14, 0x48,
 0x4f, 0x4d, 0x4d, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x05,
 0xb2, 0x4a, 0x56, 0x4e, 0x50,
 0x44, 0x00, 0x00, 0x00];

const List<int> pppp_discover_datagram2 = 
[0xf1, 0xd0, 0x01, 0x7f, 0xd1, 0x00,   
0x00, 0x00, 0x01, 0x0a, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x63,   
0x68, 0x65, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x67, 0x69, 0x02, 0x0a, 0x00,   
0x00, 0x50, 0x00, 0x00, 0x00, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,   
0x75, 0x73, 0x65, 0x72, 0x2e, 0xcd, 0x6a, 0x40, 0xfa, 0x76, 0xe5, 0x46, 0x90, 0xd6, 0x68, 0x43,   
0xdf, 0x7e, 0x91, 0x46, 0x71, 0xb5, 0x13, 0x4e, 0x51, 0x72, 0xdf, 0x42, 0x3f, 0x9a, 0xa5, 0x97,   
0x42, 0x31, 0x8d, 0x08, 0x08, 0x6b, 0x8c, 0x35, 0x4e, 0x1c, 0x14, 0x09, 0xc8, 0x98, 0x45, 0xfb,   
0x78, 0xa8, 0xe6, 0x4a, 0x1b, 0x4f, 0x05, 0x7c, 0xcf, 0x0e, 0x26, 0x36, 0x4a, 0x89, 0xe5, 0x8f,   
0x85, 0xec, 0x02, 0xa0, 0xd3, 0x02, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xa3, 0x66, 0xa7,   
0x39, 0x52, 0x3d, 0xb4, 0x11, 0x7f, 0x19, 0xbe, 0xff, 0x62, 0x65, 0xca, 0xb1, 0x66, 0x00, 0xa5,   
0xb0, 0xb9, 0x47, 0x90, 0x75, 0x31, 0x7b, 0xfe, 0x02, 0x7f, 0xa5, 0xf1, 0x1c, 0x28, 0x93, 0x2f,   
0x04, 0x2c, 0xf4, 0x03, 0xeb, 0x58, 0xb2, 0xea, 0x84, 0x43, 0x3c, 0x17, 0x1d, 0x1e, 0x07, 0xda,   
0x79, 0x2c, 0xaa, 0x19, 0x02, 0xbb, 0xcb, 0x5b, 0x28, 0x68, 0x63, 0x74, 0x8c, 0x25, 0x38, 0x46,   
0x5e, 0x93, 0x14, 0x5d, 0x9d, 0xab, 0x0b, 0x45, 0x5e, 0xe5, 0xb9, 0x37, 0xc3, 0x9d, 0x09, 0x9d,   
0x0a, 0xba, 0x15, 0x56, 0x4f, 0x1f, 0xb8, 0xba, 0x02, 0x08, 0x59, 0xaf, 0x63, 0xa0, 0xc4, 0x1a,   
0x31, 0x6e, 0x57, 0x41, 0x16, 0xba, 0xa4, 0x33, 0x26, 0x4e, 0x1e, 0x72, 0xc4, 0x4c, 0xb8, 0xc3,   
0x35, 0x90, 0x39, 0xf7, 0xc5, 0x91, 0x7c, 0x55, 0x1e, 0xcb, 0x7d, 0x75, 0x01, 0x14, 0xe6, 0x29,   
0x08, 0x12, 0x84, 0xae, 0x69, 0x0e, 0x3c, 0xc7, 0x55, 0x54, 0x6f, 0x5e, 0x56, 0x85, 0x08, 0x00,   
0x5c, 0x29, 0xe6, 0x21, 0x37, 0xb1, 0x39, 0x3f, 0x27, 0xcc, 0x22, 0x1e, 0x5b, 0xf8, 0xf0, 0x11,   
0x41, 0xb8, 0x84, 0xd5, 0x52, 0x6e, 0x32, 0x0e, 0xa2, 0x75, 0x09, 0x70, 0xeb, 0x89, 0xb2, 0xae,   
0x29, 0xa4, 0x5b, 0xc9, 0x91, 0xa1, 0xe3, 0xf6, 0x46, 0x35, 0x7e, 0xdb, 0x5c, 0xf1, 0xc1, 0x64,   
0xa4, 0x02, 0xc1, 0x6b, 0xd4, 0xb0, 0x55, 0x55, 0x31, 0xe9, 0xb7, 0x12, 0x26, 0xa9, 0xc5, 0xdf,   
0xa7, 0x8f, 0x8a, 0x96, 0x6f, 0x50, 0x83, 0x54, 0x56, 0xd4, 0xf3, 0xd5, 0x42, 0x27, 0x2a, 0x77,   
0xad, 0xd7, 0xae, 0x9a, 0x62, 0x57, 0x7c, 0xae, 0x46, 0xba, 0x54, 0x4a, 0x6d, 0xf0, 0x58, 0xf1,   
0xb0, 0xd2, 0x6e, 0x79, 0x50, 0x5d, 0x7b, 0xd0, 0xb5, 0x00, 0x60, 0xab, 0xa8];


const List<int> pppp_discover_datagram3 = [0xf1, 0xd0, 0x01, 0x5b, 0xd1, 0x00,
0x00, 0x02, 0x01, 0x0a, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x67,
0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x63, 0x67, 0x69, 0x3f, 0x6c, 0x6f,
0x67, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x6c, 0x6f, 0x67,
0x69, 0x6e, 0x70, 0x61, 0x73, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x75, 0x73, 0x65, 0x72,
0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x70, 0x77, 0x64, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
0x26, 0x01, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x73, 0x65,
0x74, 0x5f, 0x78, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x63, 0x67, 0x69, 0x3f,
0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x3d, 0x32, 0x31, 0x30, 0x30, 0x32, 0x36,
0x33, 0x38, 0x30, 0x37, 0x26, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
0x6e, 0x3d, 0x63, 0x34, 0x39, 0x37, 0x64, 0x65, 0x31, 0x36, 0x63, 0x36, 0x63, 0x62, 0x31, 0x30,
0x38, 0x61, 0x61, 0x37, 0x37, 0x63, 0x34, 0x33, 0x64, 0x39, 0x33, 0x37, 0x39, 0x35, 0x63, 0x64,
0x37, 0x33, 0x63, 0x61, 0x65, 0x30, 0x34, 0x31, 0x33, 0x37, 0x26, 0x73, 0x65, 0x63, 0x72, 0x65,
0x74, 0x5f, 0x6b, 0x65, 0x79, 0x3d, 0x35, 0x37, 0x34, 0x30, 0x36, 0x63, 0x34, 0x34, 0x36, 0x62,
0x39, 0x32, 0x66, 0x34, 0x31, 0x32, 0x61, 0x31, 0x63, 0x64, 0x63, 0x63, 0x32, 0x39, 0x30, 0x30,
0x62, 0x37, 0x36, 0x64, 0x39, 0x62, 0x26, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x3d,
0x63, 0x34, 0x39, 0x37, 0x64, 0x65, 0x31, 0x36, 0x63, 0x36, 0x63, 0x62, 0x31, 0x30, 0x38, 0x61,
0x26, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3d, 0x31, 0x26, 0x61,
0x70, 0x70, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x30, 0x26, 0x75,
0x73, 0x65, 0x64, 0x3d, 0x31, 0x26, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x3d, 0x61,
0x64, 0x6d, 0x69, 0x6e, 0x26, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x70, 0x61, 0x73, 0x3d, 0x61, 0x64,
0x6d, 0x69, 0x6e, 0x26, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x70,
0x77, 0x64, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26];

const List<int> pppp_discover_datagram4 = [0xf1, 0xd0, 0x00, 0x53, 0xd1, 0x00,
0x00, 0x02, 0x01, 0x0a, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x67,
0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x63, 0x67, 0x69, 0x3f, 0x6c, 0x6f,
0x67, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x6c, 0x6f, 0x67,
0x69, 0x6e, 0x70, 0x61, 0x73, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x75, 0x73, 0x65, 0x72,
0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x70, 0x77, 0x64, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
0x26];

const List<int> pppp_discover_datagram5 = [0xf1, 0xd0, 0x01, 0x0c, 0xd1, 0x00,
0x00, 0x03, 0x01, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x73,
0x65, 0x74, 0x5f, 0x78, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x63, 0x67, 0x69,
0x3f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x3d, 0x32, 0x31, 0x30, 0x30, 0x32,
0x36, 0x33, 0x38, 0x30, 0x37, 0x26, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
0x65, 0x6e, 0x3d, 0x63, 0x34, 0x39, 0x37, 0x64, 0x65, 0x31, 0x36, 0x63, 0x36, 0x63, 0x62, 0x31,
0x30, 0x38, 0x61, 0x61, 0x37, 0x37, 0x63, 0x34, 0x33, 0x64, 0x39, 0x33, 0x37, 0x39, 0x35, 0x63,
0x64, 0x37, 0x33, 0x63, 0x61, 0x65, 0x30, 0x34, 0x31, 0x33, 0x37, 0x26, 0x73, 0x65, 0x63, 0x72,
0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x3d, 0x35, 0x37, 0x34, 0x30, 0x36, 0x63, 0x34, 0x34, 0x36,
0x62, 0x39, 0x32, 0x66, 0x34, 0x31, 0x32, 0x61, 0x31, 0x63, 0x64, 0x63, 0x63, 0x32, 0x39, 0x30,
0x30, 0x62, 0x37, 0x36, 0x64, 0x39, 0x62, 0x26, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64,
0x3d, 0x63, 0x34, 0x39, 0x37, 0x64, 0x65, 0x31, 0x36, 0x63, 0x36, 0x63, 0x62, 0x31, 0x30, 0x38,
0x61, 0x26, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3d, 0x31, 0x26,
0x61, 0x70, 0x70, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x30, 0x26,
0x75, 0x73, 0x65, 0x64, 0x3d, 0x31, 0x26, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x3d,
0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x70, 0x61, 0x73, 0x3d, 0x61,
0x64, 0x6d, 0x69, 0x6e, 0x26, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26,
0x70, 0x77, 0x64, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26];

const List<int> pppp_discover_datagram6 = [0xf1, 0xd0, 0x01, 0x74, 0xd1, 0x00,
0x00, 0x04, 0x01, 0x0a, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x67,
0x65, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
0x2e, 0x63, 0x67, 0x69, 0x3f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x3d, 0x61, 0x64,
0x6d, 0x69, 0x6e, 0x26, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x70, 0x61, 0x73, 0x3d, 0x61, 0x64, 0x6d,
0x69, 0x6e, 0x26, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x70, 0x77,
0x64, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x01, 0x0a, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00,
0x47, 0x45, 0x54, 0x20, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x63, 0x67, 0x69, 0x3f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
0x75, 0x73, 0x65, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x70,
0x61, 0x73, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x61, 0x64,
0x6d, 0x69, 0x6e, 0x26, 0x70, 0x77, 0x64, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x01, 0x0a,
0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72,
0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x67, 0x69, 0x3f, 0x70, 0x61,
0x72, 0x61, 0x6d, 0x3d, 0x30, 0x26, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x31, 0x26, 0x6c, 0x6f,
0x67, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x6c, 0x6f, 0x67,
0x69, 0x6e, 0x70, 0x61, 0x73, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x75, 0x73, 0x65, 0x72,
0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x70, 0x77, 0x64, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
0x26, 0x01, 0x0a, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x6c, 0x69,
0x76, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x67, 0x69, 0x3f, 0x73, 0x74, 0x72,
0x65, 0x61, 0x6d, 0x69, 0x64, 0x3d, 0x31, 0x30, 0x26, 0x72, 0x65, 0x73, 0x3d, 0x33, 0x26, 0x6c,
0x6f, 0x67, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x6c, 0x6f,
0x67, 0x69, 0x6e, 0x70, 0x61, 0x73, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x75, 0x73, 0x65,
0x72, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x26, 0x70, 0x77, 0x64, 0x3d, 0x61, 0x64, 0x6d, 0x69,
0x6e, 0x26];

const List<int> pppp_discover_datagramp = [0xF1, 0xe0, 0x00, 0x00];

const List<int> pppp_discover_datagrampp = [0xF1, 0xd1, 0x00, 0x06, 0xd1, 0x00, 0x00, 0x01, 0x00, 0x00];

bool click = false;

RawDatagramSocket _udpSocket;
Map<InternetAddress, P2PDevice> _ppppDevices = Map();
int camportglobal;

/// Bind to UDP socket and enable broadcast
void main() async {
  try {
    _udpSocket = await RawDatagramSocket.bind(InternetAddress.anyIPv4, 0);
  } catch (e) {
    rethrow;
  }

  _udpSocket.broadcastEnabled = true; // Enable Broadcast
  print(_udpSocket.port);
  _udpSocket.listen((_) => onSocketRead(_)); // Attach Socket Read Function

  if (_udpSocket != null) {
    _udpSocket.send(
        pppp_discover_datagram, InternetAddress('192.168.31.119'), 32108);

    Datagram dg = _udpSocket.receive();
    var cameraport = dg.port;
    camportglobal = cameraport;
    print(cameraport);

    _udpSocket.send(
        pppp_discover_datagram1, InternetAddress('192.168.31.119'), cameraport);
    print("Sended");

    sleep(const Duration(seconds: 1));

    _udpSocket.send(
        pppp_discover_datagramp, InternetAddress('192.168.31.119'), cameraport);
    print("Sended");

    _udpSocket.send(pppp_discover_datagram2, InternetAddress('192.168.31.119'),
        camportglobal);
    print("Sended");

    _udpSocket.send(
        pppp_discover_datagramp, InternetAddress('192.168.31.119'), cameraport);
    print("Sended");

    sleep(const Duration(seconds: 1));

    _udpSocket.send(pppp_discover_datagrampp, InternetAddress('192.168.31.119'),
        cameraport);
    print("Sended");

    _udpSocket.send(pppp_discover_datagram3, InternetAddress('192.168.31.119'),
        camportglobal);
    print("Sended");

    sleep(const Duration(seconds: 1));

    _udpSocket.send(pppp_discover_datagram4, InternetAddress('192.168.31.119'),
        camportglobal);
    print("Sended");

    sleep(const Duration(seconds: 5));
  }

  if (click == false) {
    sleep(const Duration(seconds: 5));

    _udpSocket.send(pppp_discover_datagram5, InternetAddress('192.168.31.119'),
        camportglobal);

    sleep(const Duration(seconds: 5));

    _udpSocket.send(pppp_discover_datagram6, InternetAddress('192.168.31.119'),
        camportglobal);
    print("activated");

    click == true;
  }

  _udpSocket.send(pppp_discover_datagramp, InternetAddress('192.168.31.119'),
      camportglobal);
  print("Sended");
}

onSocketRead(RawSocketEvent event) {
  if (event == RawSocketEvent.read) {
    final Datagram datagram = _udpSocket.receive();
    if (datagram == null) return;
    print("packet!");
    List<String> datasocket = datagram.data
        .map((val) => val.toRadixString(16).padLeft(2, '0').toUpperCase())
        .toList();
    _ppppDevices[datagram.address] ??= P2PDevice.fromDatagram(datagram);
    _ppppDevices[datagram.address].datagramStream.add(datagram);
    //print(datasocket);

  }
}

class P2PDevice {
  InternetAddress address;
  int port;
  final StreamController<Datagram> datagramStreamController;

  Sink<Datagram> get datagramStream => datagramStreamController.sink;

  P2PDevice({this.address, this.port})
      : datagramStreamController = StreamController<Datagram>() {
    datagramStreamController.stream
        .listen((datagram) => parseDatagram(datagram));
  }

  P2PDevice.fromDatagram(Datagram datagram)
      : this(address: datagram.address, port: datagram.port);

  void parseDatagram(Datagram datagram) {
    print('Parsing!!!!!!!!!!!');
    var info = String.fromCharCodes(datagram.data);
    portnumber = datagram.port;
    //print(info);
  }

  void dispose() {
    datagramStreamController.close();
  }
}
